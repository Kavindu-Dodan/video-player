<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>MainPage</title>
    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link rel="stylesheet" href="css/custom.css">
</head>

<body>
    <div class="container">
        <h2 class="topnbottom_padding">Video Player</h2>
    </div>

    <div class="container top_padding">
        <div class="row justify-content-start">
            <div class="col-3 botom_padding">
                <div class="row justify-content-start botom_padding">
                    <label>Choose Video :</label>
                    <select id="selector">
                        <option value="bunny">Bunny-webm</option>
                        <option value="Cartoon">Cartoon-webm</option>
                        <option value="River">River-MP4</option>
                        <option value="Sky">Sky-MP4</option>
                    </select>
                </div>
                <div class="row justify-content-start botom_padding">
                    <label>Choose Quality :</label>
                    <select id="quality">
                        <option de value="high">High - Default</option>
                        <option value="low">Low</option>
                        <option value="adaptive">Adaptive</option>
                    </select>
                </div>
            </div>
            <div class="col-2 botom_padding">
                <div class="row botom_padding">
                </div>
                <div>
                    <button type="button" class="btn btn-primary" onclick="start_video();">Load</button>
                </div>
            </div>
            <div class="col-6 botom_padding">
            </div>
        </div>
        <div class="row" id="video_row">
            <div class="col">
                <video class="botom_padding" height="360" id="player" controls>Browser does not support VIDEO tag</video>
            </div>
            <div class="col-4">
                <h5 class="botom_padding">Console :</h5>
                    <textarea class="border" cols="50" rows="10" id="console" readonly></textarea>
            </div>
        </div>
    </div>

    <script src="js/jquery-3.3.1.slim.min.js"></script>
    <script src="js/popper.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/logic.js"></script>

    <script>
        log("Starting Scripts", "Info");

        var base = "http://localhost:9090/server/video";

        log("Loading metadata", "Debug");
        log("Base URL = " + base, "Debug");

        function start_video() {
            var videoPlayer = document.getElementById('player');
            videoPlayer.pause();
            videoPlayer.currentTime = 0;
            videoPlayer.autoPlay = true;

            var mediaSource = new MediaSource;

            var video_id = document.getElementById('selector').value;
            var selected_quality = document.getElementById("quality").value;

            get_metadata(base, video_id)
                .then(function (metadata) {
                    log("Video :" + metadata['title']);
                    log("MIME :" + metadata['mime']);
                    log("Length :" + metadata['length']);

                    // todo - warning on no quality 
                    // todo - set metadata to use selected quality
                    // todo - Handle adaptive quality 

                    log("Selected Quality :" + selected_quality);

                    log("Available quality :" + metadata["quality"])

                    if (selected_quality != "adaptive" && !metadata["quality"].some(q => q == selected_quality)) {
                        alert("Quality not found. Video won't be played.");
                        return;
                    }

                    metadata["quality"] = selected_quality;

                    log("Available segments :")
                    metadata["segments"].forEach(element => {
                        log('\t' + element.segment)
                    });

                    starter(metadata, videoPlayer, mediaSource)
                })
                .catch(function (result) {
                    log("Something went wrong :" + result, "Error")
                })
        }

        function starter(metadata, videoPlayer, mediaSource) {
            videoPlayer.src = URL.createObjectURL(mediaSource);
            mediaSource.addEventListener('sourceopen', function () {
                player(metadata, mediaSource)
            });
        }

        async function player(metadata, mediaSource) {
            if (MediaSource.isTypeSupported(metadata['mime'])) {
                var sourceBuffer = mediaSource.addSourceBuffer(metadata['mime']);
                sourceBuffer.mode = 'sequence';

                var segmentCount = metadata['segments'].length
                var index = 0;

                sourceBuffer.addEventListener('updateend', async function () {
                    index++;
                    if (index >= segmentCount) {
                        sourceBuffer.onupdateend = null;
                        mediaSource.endOfStream();
                        log("All segments loaded", 'Debug')
                        return;
                    }

                    // Request Chunk
                    log("Requesting :" + metadata['segments'][index].segment)
                    var chunk = await get_video_chunk(url_create(base, metadata["title"], metadata['segments'][index].segment, metadata['quality']));
                    log("Appended :" + metadata['segments'][index].segment)
                    
                    sourceBuffer.appendBuffer(chunk);
                });
                
                // Request Chunk
                log("Requesting :" + metadata['segments'][index].segment)
                var chunk = await get_video_chunk(url_create(base, metadata["title"], metadata['segments'][index].segment, metadata['quality']));
                log("Appended :" + metadata['segments'][index].segment)

                
                sourceBuffer.appendBuffer(chunk);
            } else {
                alert("MIME type is not supported")
            }
        }
    </script>
</body>

</html>