<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>MainPage</title>
    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link rel="stylesheet" href="css/custom.css">
</head>

<body>
    <div class="container">
        <h2 class="topnbottom_padding">Video Player</h2>
    </div>

    <div class="container top_padding">
        <div class="row justify-content-start">
            <div class="col-3 botom_padding">
                <div class="row justify-content-start botom_padding">
                    <label>Choose Video :</label>
                    <select id="selector">
                        <option value="bunny">Bunny-webm</option>
                        <option value="Cartoon">Cartoon-webm</option>
                        <option value="River">River-MP4</option>
                        <option value="Sky">Sky-MP4</option>
                    </select>
                </div>
                <div class="row justify-content-start botom_padding">
                    <label>Choose Quality :</label>
                    <select id="quality">
                        <option value="adaptive">Adaptive-Default</option>
                        <option de value="high">High</option>
                        <option value="low">Low</option>
                    </select>
                </div>
            </div>
            <div class="col-2 botom_padding">
                <div class="row botom_padding">
                </div>
                <div>
                    <button type="button" class="btn btn-primary" onclick="start_video();">Load</button>
                </div>
            </div>
            <div class="col-6 botom_padding">
            </div>
        </div>
        <div class="row" id="video_row">
            <div class="col">
                <video class="botom_padding" height="360" id="player" controls>Browser does not support VIDEO tag</video>
            </div>
            <div class="col-4">
                <h5 class="botom_padding">Console :</h5>
                <button type="button" class="btn btn-primary botom_padding" onclick="clearConsole();">Clear</button>
                <textarea class="border" cols="50" rows="10" id="console" readonly></textarea>
            </div>
        </div>
    </div>

    <script src="js/jquery-3.3.1.slim.min.js"></script>
    <script src="js/popper.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/logic.js"></script>

    <script>
        log("Player Ready", "Info");

        var base = "http://localhost:9090/server/video";
        log("Base URL = " + base);

        function start_video() {
            var videoPlayer = document.getElementById('player');
            videoPlayer.pause();
            videoPlayer.currentTime = 0;
            videoPlayer.autoPlay = true;

            var mediaSource = new MediaSource;

            var video_id = document.getElementById('selector').value;
            var selected_quality = document.getElementById("quality").value;

            log("Loading metadata");

            get_metadata(base, video_id)
                .then(function (metadata) {
                    // Video information
                    log("Video : " + metadata['title']);
                    log("MIME : " + metadata['mime']);
                    log("Length : " + metadata['length']);
                    log("Selected Quality : " + selected_quality);
                    log("Available quality : " + metadata["quality"])

                    // todo - Handle adaptive quality 
                    if (selected_quality != "adaptive" && !metadata["quality"].some(q => q == selected_quality)) {
                        alert("Quality not found. Video won't be played.");
                        return;
                    }

                    metadata["quality"] = selected_quality;

                    log("Available segments :")
                    metadata["segments"].forEach(element => {
                        log('\t' + element.segment)
                    });

                    player(metadata, videoPlayer, mediaSource)
                })
                .catch(function (result) {
                    log("Something went wrong :" + result, "Error")
                })
        }

        async function player(metadata, videoPlayer, mediaSource) {
            videoPlayer.src = URL.createObjectURL(mediaSource);

            if (!MediaSource.isTypeSupported(metadata['mime'])) {
                alert("MIME type " + metadata['mime'] + "is not supported by browser");
                log("MIME type " + metadata['mime'] + "is not supported by browser", "Error")
                log("Video stopped")
                return;
            }

            mediaSource.addEventListener('sourceopen', async function () {
                var sourceBuffer = mediaSource.addSourceBuffer(metadata['mime']);

                //////////////
                //sourceBuffer.mode = 'segments';

                var segmentCount = metadata['segments'].length
                var index = 0;

                sourceBuffer.addEventListener('update', async function () {

                    // Set time offset once loading is done
                    sourceBuffer.timestampOffset = metadata['segments'][index].end;
                    log("\tTimestamp after:" + sourceBuffer.timestampOffset)
                    
                    // Loading and time setting is done move to next frame
                    index++;

                    if (index >= metadata['segments'].length) {
                        log("All segments loaded")
                        sourceBuffer.onupdateend = null;
                        mediaSource.endOfStream();
                        return;
                    }
                    next_quality = await loadChunk(metadata, index, sourceBuffer, next_quality);
                });

                // First segment is always in requested quality or in high 
                if (metadata["quality"] == "adaptive") {
                    next_quality = await loadChunk(metadata, index, sourceBuffer, "high");
                } else {
                    next_quality = await loadChunk(metadata, index, sourceBuffer, metadata["quality"]);
                }

            });
        }

        // Will calculate the bandwith if quality "adaptive" is chosen. Return the next quality to request by calling function
        async function loadChunk(metadata, segment_index, sourceBuffer, quality) {
            // Request & load Chunk

            var start = performance.now()

            log("Requesting : " + metadata['segments'][segment_index].segment)
            var chunk = await get_video_chunk(
                url_create(base,
                    metadata["title"],
                    metadata['segments'][segment_index].segment,
                    quality));

            log("\t Appended : " + metadata['segments'][segment_index].segment)
            sourceBuffer.appendBuffer(chunk);

            var end = performance.now();
            var time = Math.round((end - start));
            var bw_kBps = Math.round((chunk.byteLength / 1000) / (time / 1000));
            log("\t Bandwidth : " + bw_kBps + "kB/s")

            if (metadata["quality"] == "adaptive" && bw_kBps < 500) {
                quality = "low";
            } else if (metadata["quality"] == "adaptive" && bw_kBps >= 500) {
                quality = "high";
            }

            return quality;
        }

        function clearConsole() {
            document.getElementById("console").value = "";
        }

    </script>
</body>

</html>